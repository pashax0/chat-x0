{"version":3,"sources":["components/Head.js","components/Body.js","components/MessageForm.js","components/LoginForm.js","components/Foot.js","App.js","serviceWorker.js","index.js"],"names":["Head","props","status","from","onLogout","onLogin","user","toUpperCase","react_default","a","createElement","onClick","Messages","lazy","Promise","resolve","setTimeout","__webpack_require__","e","then","bind","Body","msgs","scrollTop","scrolling","react","fallback","react_loader_spinner_default","className","type","color","MessageForm","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","setState","value","target","handleSubmit","msg","message","state","ws","send","JSON","stringify","preventDefault","_this2","Fragment","onSubmit","ev","onChange","Component","Login","Foot","components_MessageForm","LoginForm","Date","getFullYear","App","handleLogout","localStorage","removeItem","handleLogin","setItem","handleScroll","fromTop","scrollHeight","msgsInStorage","notif","getItem","notificationPerm","wsStatus","WebSocket","window","Notification","requestPermission","result","console","log","onmessage","reverseData","parse","data","reverse","concat","toConsumableArray","onclose","code","readyState","_this$state","connectStatus","components_Head","components_Body","components_Foot","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d11d7bc9.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Head(props) {\r\n  const {status, from, onLogout, onLogin} = props;\r\n  const user = from ? from.toUpperCase() : 'Stranger';\r\n  return (\r\n    <header>\r\n      <h1>{user}, welcome to chat</h1>\r\n      {from ? <button onClick={() => onLogout()}>logout</button>\r\n      :<button onClick={() => onLogin()}>login</button>}\r\n      {/* <p>{status ? 'connected' : 'not'}</p> */}\r\n    </header>\r\n  )\r\n}\r\n\r\nexport default Head;\r\n","import React, { lazy, Suspense } from 'react';\r\nimport Spinner from 'react-loader-spinner';\r\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\r\n\r\nimport '../styles/body.css'\r\nconst Messages = lazy(() => {\r\n  return new Promise(resolve => {\r\n    setTimeout(() => resolve(import(\"./Messages\")), 2000);\r\n  });\r\n});\r\n\r\n\r\nfunction Body(props) {\r\n  const { msgs, scrollTop, scrolling } = props;\r\n  return (\r\n    <main>\r\n      <Suspense fallback={<Spinner\r\n        className=\"spiner\"\r\n        type=\"Triangle\"\r\n        color=\"#000\"\r\n      />}>\r\n        <Messages\r\n          msgs={msgs}\r\n          scrollTop={scrollTop}\r\n          scrolling={scrolling}\r\n        />\r\n      </Suspense>\r\n    </main>\r\n  )\r\n}\r\n\r\nexport default Body;\r\n","import React, { Component } from 'react';\r\n\r\nclass MessageForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      value: ''\r\n    };\r\n  }\r\n\r\n  handleChange = (event) => {\r\n    this.setState({value: event.target.value});\r\n  }\r\n\r\n  handleSubmit = (event) => {\r\n    const msg = {\r\n      from: this.props.from,\r\n      message: this.state.value,\r\n    };\r\n    this.props.ws.send(JSON.stringify(msg));\r\n    event.preventDefault();\r\n    this.setState({value: ''});\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <form className=\"mess-form\" onSubmit={(ev) => this.handleSubmit(ev)}>\r\n          <label>\r\n            {/* <div>Message:</div> */}\r\n            <textarea type=\"text\" value={this.state.value} onChange={this.handleChange} />\r\n          </label>\r\n          <input type=\"submit\" value=\"Send\" />\r\n        </form>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MessageForm;\r\n","import React from 'react';\r\n\r\nfunction Login(props) {\r\n  return (\r\n    <div\r\n      className=\"login-attent\"\r\n    >\r\n      <h1>For commenting, please, login!</h1>\r\n      <button\r\n        onClick={() => props.onLogin()}\r\n      >Login</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Login;\r\n","import React from 'react';\r\n\r\nimport MessageForm from './MessageForm';\r\nimport LoginForm from './LoginForm';\r\n\r\nfunction Foot(props) {\r\n  const { onLogin, from, ws } = props;\r\n\r\n  return (\r\n    <footer>\r\n      {from ? <MessageForm\r\n          ws={ws}\r\n          from={from}\r\n        />\r\n        : <LoginForm\r\n          onLogin={onLogin}\r\n        />\r\n      }\r\n      <small className=\"copyright\">Â© pashax0 {new Date().getFullYear()}</small>\r\n    </footer>\r\n  )\r\n}\r\n\r\nexport default Foot;\r\n","import React, { Component } from 'react';\r\n\r\nimport Head from './components/Head';\r\nimport Body from './components/Body';\r\nimport Foot from './components/Foot';\r\nimport './styles/reset.css';\r\nimport './styles/app.scss';\r\n\r\nclass App extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    // localStorage.clear();\r\n    let msgsInStorage = [];\r\n    const notif = localStorage.getItem('notif') ? localStorage.getItem('notif') : null;\r\n    const from = localStorage.getItem('from') ? localStorage.getItem('from') : false;\r\n    if (localStorage.getItem('msgs')) {\r\n      msgsInStorage = localStorage.getItem('msgs');\r\n    }\r\n    \r\n    this.state = {\r\n      notificationPerm: notif,\r\n      wsStatus: null,\r\n      from: from,\r\n      msgs: msgsInStorage,\r\n      scrollTop: 500,\r\n    }\r\n    this.ws = new WebSocket('ws://st-chat.shas.tel');\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (!(\"Notification\" in window)) {\r\n      console.log(\"This browser does not support desktop notification\");\r\n    } else {\r\n      if (!this.state.notificationPerm) {\r\n        Notification.requestPermission()\r\n          .then(result => {\r\n            this.setState({\r\n              notificationPerm: result,\r\n            })\r\n          })\r\n      }\r\n    }\r\n    //   if (Notification.permission === \"granted\") {\r\n    //   this.notification = new Notification(\"Hi there!\");\r\n    // } else if (Notification.permission !== 'denied') {\r\n    //   Notification.requestPermission(function (permission) {\r\n    //     if (permission === \"granted\") {\r\n    //       var notification = new Notification(\"Hi there!\");\r\n    //     }\r\n    //   });\r\n    // }\r\n\r\n    // this.ws.onopen = () => (\r\n    //   this.setState({\r\n    //     connectStatus: true,\r\n    //   })\r\n    // )\r\n    // this.ws.onerror = () => (\r\n    //   this.setState({\r\n    //     connectStatus: false,\r\n    //   })\r\n    // )\r\n    this.ws.onmessage = (msg) => {\r\n      this.setState((state) => {\r\n        const reverseData = JSON.parse(msg.data).reverse();\r\n        return {\r\n          msgs: [...state.msgs, ...reverseData],\r\n        }\r\n      })\r\n    }\r\n\r\n    this.ws.onclose = (ev) => console.log(ev.code);\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    // const ws = new WebSocket('ws://st-chat.shas.tel');\r\n    // if (ws.readyState !== this.state.wsStatus) {\r\n    //   this.setState({\r\n    //     wsStatus: ws.readyState,\r\n    //   })\r\n    // }\r\n    console.log(this.ws.readyState);\r\n  }\r\n  \r\n  handleLogout = () => {\r\n    localStorage.removeItem('from');\r\n    this.setState({\r\n      from: false,\r\n    })\r\n  }\r\n\r\n  handleLogin = () => {\r\n    localStorage.setItem('from', 'me');\r\n    this.setState({\r\n      from: 'me',\r\n    })\r\n  }\r\n\r\n  handleScroll = (ev) => {\r\n    const fromTop = ev.target.scrollHeight;\r\n    this.setState({\r\n      scrollTop: fromTop,\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const { wsStatus, from, msgs, scrollTop, connectStatus } = this.state;\r\n    return (\r\n      <>\r\n        <Head\r\n          // status={connectStatus}\r\n          from={from}\r\n          onLogout={this.handleLogout}\r\n          onLogin={this.handleLogin}\r\n        />\r\n        <Body\r\n          wsStatus={wsStatus}\r\n          msgs={msgs}\r\n          onLogin={this.handleLogin}\r\n          from={from}\r\n          user=\"test\"\r\n          ws={this.ws}\r\n          scrollTop={scrollTop}\r\n          scrolling={this.handleScroll}\r\n        />\r\n        <Foot\r\n          onLogin={this.handleLogin}\r\n          from={from}\r\n          ws={this.ws}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}