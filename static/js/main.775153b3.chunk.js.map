{"version":3,"sources":["components/Head.js","components/Body.js","components/MessageForm.js","components/LoginForm.js","components/Foot.js","App.js","serviceWorker.js","index.js"],"names":["Head","props","status","from","onLogout","onLogin","user","toUpperCase","react_default","a","createElement","onClick","Messages","lazy","Promise","resolve","setTimeout","__webpack_require__","e","then","bind","Body","msgs","scrollTop","scrolling","react","fallback","react_loader_spinner_default","className","type","color","MessageForm","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","setState","value","target","handleSubmit","msg","message","state","ws","send","JSON","stringify","preventDefault","_this2","Fragment","onSubmit","ev","onChange","Component","Login","Foot","components_MessageForm","LoginForm","Date","getFullYear","App","handleLogout","localStorage","removeItem","handleLogin","setItem","handleScroll","fromTop","scrollHeight","msgsInStorage","getItem","wsStatus","WebSocket","onopen","console","log","concat","readyState","onerror","onmessage","reverseData","parse","data","reverse","toConsumableArray","onclose","code","clearInterval","timer","window","Notification","permission","requestPermission","result","alert","CLOSED","_this$state","connectStatus","components_Head","components_Body","components_Foot","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.775153b3.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Head(props) {\r\n  const {status, from, onLogout, onLogin} = props;\r\n  const user = from ? from.toUpperCase() : 'Stranger';\r\n  return (\r\n    <header>\r\n      <h1>{user}, welcome to chat</h1>\r\n      {from ? <button onClick={() => onLogout()}>logout</button>\r\n      :<button onClick={() => onLogin()}>login</button>}\r\n      {/* <p>{status ? 'connected' : 'not'}</p> */}\r\n    </header>\r\n  )\r\n}\r\n\r\nexport default Head;\r\n","import React, { lazy, Suspense } from 'react';\r\nimport Spinner from 'react-loader-spinner';\r\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\r\n\r\nimport '../styles/body.css'\r\nconst Messages = lazy(() => {\r\n  return new Promise(resolve => {\r\n    setTimeout(() => resolve(import(\"./Messages\")), 2000);\r\n  });\r\n});\r\n\r\n\r\nfunction Body(props) {\r\n  const { msgs, scrollTop, scrolling } = props;\r\n  return (\r\n    <main>\r\n      <Suspense fallback={<Spinner\r\n        className=\"spiner\"\r\n        type=\"Triangle\"\r\n        color=\"#000\"\r\n      />}>\r\n        <Messages\r\n          msgs={msgs}\r\n          scrollTop={scrollTop}\r\n          scrolling={scrolling}\r\n        />\r\n      </Suspense>\r\n    </main>\r\n  )\r\n}\r\n\r\nexport default Body;\r\n","import React, { Component } from 'react';\r\n\r\nclass MessageForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      value: ''\r\n    };\r\n  }\r\n\r\n  handleChange = (event) => {\r\n    this.setState({value: event.target.value});\r\n  }\r\n\r\n  handleSubmit = (event) => {\r\n    const msg = {\r\n      from: this.props.from,\r\n      message: this.state.value,\r\n    };\r\n    this.props.ws.send(JSON.stringify(msg));\r\n    event.preventDefault();\r\n    this.setState({value: ''});\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <form className=\"mess-form\" onSubmit={(ev) => this.handleSubmit(ev)}>\r\n          <label>\r\n            {/* <div>Message:</div> */}\r\n            <textarea type=\"text\" value={this.state.value} onChange={this.handleChange} />\r\n          </label>\r\n          <input type=\"submit\" value=\"Send\" />\r\n        </form>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MessageForm;\r\n","import React from 'react';\r\n\r\nfunction Login(props) {\r\n  return (\r\n    <div\r\n      className=\"login-attent\"\r\n    >\r\n      <h1>For commenting, please, login!</h1>\r\n      <button\r\n        onClick={() => props.onLogin()}\r\n      >Login</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Login;\r\n","import React from 'react';\r\n\r\nimport MessageForm from './MessageForm';\r\nimport LoginForm from './LoginForm';\r\n\r\nfunction Foot(props) {\r\n  const { onLogin, from, ws } = props;\r\n\r\n  return (\r\n    <footer>\r\n      {from ? <MessageForm\r\n          ws={ws}\r\n          from={from}\r\n        />\r\n        : <LoginForm\r\n          onLogin={onLogin}\r\n        />\r\n      }\r\n      <small className=\"copyright\">Â© pashax0 {new Date().getFullYear()}</small>\r\n    </footer>\r\n  )\r\n}\r\n\r\nexport default Foot;\r\n","import React, { Component } from 'react';\n\nimport Head from './components/Head';\nimport Body from './components/Body';\nimport Foot from './components/Foot';\nimport './styles/reset.css';\nimport './styles/app.scss';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    let msgsInStorage = [];\n    const from = localStorage.getItem('from') ? localStorage.getItem('from') : false;\n    if (localStorage.getItem('msgs')) {\n      msgsInStorage = localStorage.getItem('msgs');\n    }\n    \n    this.state = {\n      wsStatus: null,\n      from: from,\n      msgs: msgsInStorage,\n      scrollTop: 500,\n    }\n\n    this.ws = new WebSocket('wss://wssproxy.herokuapp.com');\n  \n  }\n\n  componentDidMount() {\n    // this.timer = setInterval(() => this.getWsStatus(), 3000);\n    \n    \n    this.ws.onopen = () => {\n      console.log(`onopen - ${this.ws.readyState}`);\n      this.setState({\n        wsStatus: 'open',\n      })\n    };\n    \n    this.ws.onerror = () => {\n      console.log(`onerror - ${this.ws.readyState}`);\n    };\n\n    this.ws.onmessage = (msg) => {\n      console.log(`onmessage - ${this.ws.readyState}`);\n      this.setState((state) => {\n        const reverseData = JSON.parse(msg.data).reverse();\n        return {\n          msgs: [...state.msgs, ...reverseData],\n        }\n      })\n    };\n\n    this.ws.onclose = (ev) => {\n      console.log(`onclose ${ev.code} - ${this.ws.readyState}`);\n    };\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timer);\n  }\n\n  componentDidUpdate() {\n    // const ws = new WebSocket('ws://st-chat.shas.tel');\n    // if (ws.readyState !== this.state.wsStatus) {\n    //   this.setState({\n    //     wsStatus: ws.readyState,\n    //   })\n    // }\n    console.log('App update');\n  }\n\n  setNotification() {\n    if (!(\"Notification\" in window)) {\n      console.log(\"This browser does not support desktop notification\");\n    } else {\n      if (Notification.permission === 'default') {\n        Notification.requestPermission()\n          .then(result => {\n            result === 'granted' ? alert(`Thank, you!`) : alert('If you change your mind, please - click this button!');\n          })\n      }\n    }\n  }\n\n  getWsStatus() {\n    // this.ws.send('');\n    if (this.ws.readyState === WebSocket.CLOSED) {\n      console.log(`ws status - closed`);\n    };\n    console.log(`ws status - ${this.ws.readyState}`);\n  }\n  \n  handleLogout = () => {\n    localStorage.removeItem('from');\n    localStorage.removeItem('notif');\n    this.setState({\n      from: false,\n    })\n    \n  }\n\n  handleLogin = () => {\n    // this.setNotification();\n    localStorage.setItem('from', 'me');\n    this.setState({\n      from: 'me',\n    })\n  }\n\n  handleScroll = (ev) => {\n    const fromTop = ev.target.scrollHeight;\n    this.setState({\n      scrollTop: fromTop,\n    })\n  }\n\n  render() {\n    const { wsStatus, from, msgs, scrollTop, connectStatus } = this.state;\n    return (\n      <>\n        <Head\n          // status={connectStatus}\n          from={from}\n          onLogout={this.handleLogout}\n          onLogin={this.handleLogin}\n        />\n        <Body\n          msgs={msgs}\n          scrollTop={scrollTop}\n          scrolling={this.handleScroll}\n        />\n        <Foot\n          onLogin={this.handleLogin}\n          from={from}\n          // ws={this.ws}\n        />\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}