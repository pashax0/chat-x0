{"version":3,"sources":["components/LoginForm.js","components/LoginButton.js","components/Head.js","components/Body.js","components/MessageForm.js","components/Foot.js","App.js","serviceWorker.js","index.js"],"names":["Login","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","setState","value","target","handleSubmit","ev","onLogin","state","preventDefault","_this2","react_default","a","createElement","className","onSubmit","type","onChange","Component","LoginButton","_React$useState","React","useState","_React$useState2","slicedToArray","open","setOpen","Fragment","onClick","Modal","disableAutoFocus","aria-labelledby","aria-describedby","onClose","LoginForm","Head","wsStatus","from","onLogout","user","toUpperCase","Messages","lazy","Promise","resolve","setTimeout","__webpack_require__","e","then","bind","Body","ws","msgs","scrollTop","scrolling","react","fallback","react_loader_spinner_default","color","MessageForm","onSendMsg","Foot","components_MessageForm","Date","getFullYear","App","handleLogout","localStorage","removeItem","handleLogin","name","setItem","handleScroll","fromTop","scrollHeight","handleSendMsg","text","msg","message","send","JSON","stringify","localMsgs","parse","getItem","push","msgsInStorage","online","isActiveWindow","handlerInternetStatus","handlerWindowStatus","connectWs","prevProps","prevState","clearInterval","timer","setInterval","_this3","navigator","onLine","window","addEventListener","_this4","_this5","WebSocket","onopen","console","log","concat","readyState","onerror","onclose","code","onmessage","reverseData","data","reverse","toConsumableArray","Notification","permission","requestPermission","result","alert","_this$state","components_Head","components_Body","components_Foot","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ae46fac0.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport '../styles/login-form.scss';\r\n\r\nclass Login extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      value: ''\r\n    };\r\n  }\r\n\r\n  handleChange = (event) => {\r\n    this.setState({value: event.target.value});\r\n  }\r\n\r\n  handleSubmit = (ev) => {\r\n    this.props.onLogin(this.state.value);\r\n    ev.preventDefault();\r\n    this.setState({value: ''});\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        className=\"login-form\"\r\n      >\r\n        <h1>Hello!</h1>\r\n        <form onSubmit={(ev) => this.handleSubmit(ev)}>\r\n          <label>\r\n            <p>Nickname:</p>\r\n            <input type=\"text\" value={this.state.value} onChange={this.handleChange} />\r\n          </label>\r\n          <input type=\"submit\" value=\"ok\" />\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Login;\r\n","import React from 'react';\r\nimport Modal from '@material-ui/core/Modal';\r\n\r\nimport LoginForm from './LoginForm';\r\n\r\nexport default function LoginButton(props) {\r\n  const { onLogin } = props;\r\n\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n  \r\n  return (\r\n    <>\r\n      <button type=\"button\" onClick={handleOpen}>\r\n        login\r\n      </button>\r\n      <Modal\r\n        className=\"modal\"\r\n        disableAutoFocus={true}\r\n        aria-labelledby=\"simple-modal-title\"\r\n        aria-describedby=\"simple-modal-description\"\r\n        open={open}\r\n        onClose={handleClose}\r\n      >\r\n        <LoginForm\r\n          onLogin={onLogin}\r\n        />\r\n      </Modal>\r\n    </>\r\n  )\r\n}\r\n","import React from 'react';\r\n\r\nimport LoginButton from './LoginButton';\r\n\r\nfunction Head(props) {\r\n  const { wsStatus, from, onLogout, onLogin } = props;\r\n  const user = from ? from.toUpperCase() : 'Stranger';\r\n  return (\r\n    <header>\r\n      <h1>{user}, welcome to chat</h1>\r\n      <p>{wsStatus}</p>\r\n      {from ? <button onClick={() => onLogout()}>logout</button>\r\n      : <LoginButton\r\n        onLogin={onLogin}\r\n      />}\r\n    </header>\r\n  )\r\n}\r\n\r\nexport default Head;\r\n","import React, { lazy, Suspense } from 'react';\r\nimport Spinner from 'react-loader-spinner';\r\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\r\n\r\nimport '../styles/body.css'\r\nconst Messages = lazy(() => {\r\n  return new Promise(resolve => {\r\n    setTimeout(() => resolve(import(\"./Messages\")), 2000);\r\n  });\r\n});\r\n\r\n\r\nfunction Body(props) {\r\n  const { wsStatus, ws, msgs, scrollTop, scrolling } = props;\r\n  return (\r\n    <main>\r\n      {(wsStatus !== 1006) ? \r\n        <Suspense fallback={<Spinner\r\n          className=\"spiner\"\r\n          type=\"Triangle\"\r\n          color=\"#000\"\r\n        />}>\r\n          <Messages\r\n            ws={ws}\r\n            msgs={msgs}\r\n            scrollTop={scrollTop}\r\n            scrolling={scrolling}\r\n          />\r\n        </Suspense>\r\n        : <div className=\"error\">\r\n          <p>Error with your connection!</p>\r\n          <p>You can send message, but it will be send after reconnection</p>\r\n        </div>\r\n      }\r\n    </main>\r\n  )\r\n}\r\n\r\nexport default Body;\r\n","import React, { Component } from 'react';\r\n\r\nclass MessageForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      value: ''\r\n    };\r\n  }\r\n\r\n  handleChange = (event) => {\r\n    this.setState({value: event.target.value});\r\n  }\r\n\r\n  handleSubmit = (ev) => {\r\n    this.props.onSendMsg(this.state.value);\r\n    ev.preventDefault();\r\n    this.setState({value: ''});\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <form className=\"mess-form\" onSubmit={(ev) => this.handleSubmit(ev)}>\r\n          <label>\r\n            {/* <div>Message:</div> */}\r\n            <textarea type=\"text\" value={this.state.value} onChange={this.handleChange} />\r\n          </label>\r\n          <input type=\"submit\" value=\"Send\" />\r\n        </form>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MessageForm;\r\n","import React from 'react';\r\n\r\nimport MessageForm from './MessageForm';\r\nimport LoginButton from './LoginButton';\r\n\r\nfunction Foot(props) {\r\n  const { onLogin, from, onSendMsg } = props;\r\n\r\n  return (\r\n    <footer>\r\n      {from ? <MessageForm\r\n          onSendMsg={onSendMsg}\r\n          from={from}\r\n        />\r\n        : <div\r\n          className=\"login-attent\"\r\n        >\r\n          <h1>For commenting, please, login!</h1>\r\n          <LoginButton\r\n            onLogin={onLogin}\r\n          />\r\n        </div>\r\n      }\r\n      <small className=\"copyright\">© pashax0 {new Date().getFullYear()}</small>\r\n    </footer>\r\n  )\r\n}\r\n\r\nexport default Foot;\r\n","import React, { Component } from 'react';\r\n\r\n// import Ws from './services/websocket';\r\nimport Head from './components/Head';\r\nimport Body from './components/Body';\r\nimport Foot from './components/Foot';\r\nimport './styles/reset.css';\r\nimport './styles/app.scss';\r\n\r\nclass App extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    // localStorage.clear();\r\n    let msgsInStorage = [];\r\n    const from = localStorage.getItem('from') ? localStorage.getItem('from') : false;\r\n    if (localStorage.getItem('msgs')) {\r\n      msgsInStorage = localStorage.getItem('msgs');\r\n    }\r\n    \r\n    this.state = {\r\n      online: null,\r\n      isActiveWindow: true,\r\n      wsStatus: null,\r\n      from: from,\r\n      msgs: msgsInStorage,\r\n      scrollTop: 500,\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.handlerInternetStatus();\r\n    this.handlerWindowStatus();\r\n    this.connectWs();\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    clearInterval(this.timer);\r\n\r\n    if (this.state.wsStatus !== prevState.wsStatus) {\r\n      this.setState({\r\n        msgs: [],\r\n      })\r\n    }\r\n\r\n    if (this.state.wsStatus !== 1) {\r\n      this.timer = setInterval(() => this.connectWs(), 10000);\r\n    }\r\n  }\r\n\r\n  handlerInternetStatus() {\r\n    this.setState({online: navigator.onLine,})\r\n    window.addEventListener(\"offline\", () => this.setState({online: false, wsStatus: 'offline'}))\r\n    window.addEventListener(\"online\", () => this.setState({online: true,}))\r\n  }\r\n\r\n  handlerWindowStatus() {\r\n    window.addEventListener(\"focus\", () => (\r\n      this.setState({\r\n        isActiveWindow: true,\r\n      })\r\n    ))\r\n    window.addEventListener(\"blur\", () => (\r\n      this.setState({\r\n        isActiveWindow: false,\r\n      })\r\n    ))\r\n  }\r\n\r\n  connectWs() {\r\n    this.ws = new WebSocket('wss://wssproxy.herokuapp.com/');\r\n    \r\n    this.ws.onopen = () => {\r\n      console.log(`onopen - ${this.ws.readyState}`);\r\n      this.setState({\r\n        wsStatus: this.ws.readyState,\r\n      })\r\n    };\r\n\r\n    this.ws.onerror = () => {\r\n      console.log(`onerror - ${this.ws.readyState}`);\r\n    };\r\n\r\n    this.ws.onclose = (ev) => {\r\n      this.setState({\r\n        wsStatus: ev.code,\r\n      })\r\n      console.log(`onclose ${ev.code} - ${this.ws.readyState}`);\r\n    };\r\n\r\n    this.ws.onmessage = (msg) => {\r\n      this.setState((state) => {\r\n        const reverseData = JSON.parse(msg.data).reverse();\r\n        return {\r\n          msgs: [...state.msgs, ...reverseData],\r\n        }\r\n      })\r\n    };\r\n  }\r\n\r\n  setNotification() {\r\n    if (!(\"Notification\" in window)) {\r\n      console.log(\"This browser does not support desktop notification\");\r\n    } else {\r\n      if (Notification.permission === 'default') {\r\n        Notification.requestPermission()\r\n          .then(result => {\r\n            result === 'granted' ? alert(`Thank, you!`) : alert('If you change your mind, please - click this button!');\r\n          })\r\n      }\r\n    }\r\n  }\r\n\r\n handleLogout = () => {\r\n    localStorage.removeItem('from');\r\n    localStorage.removeItem('notif');\r\n    this.setState({\r\n      from: false,\r\n    })\r\n  }\r\n\r\n  handleLogin = (name) => {\r\n    localStorage.setItem('from', name);\r\n    this.setState({\r\n      from: name,\r\n    })\r\n  }\r\n\r\n  handleScroll = (ev) => {\r\n    const fromTop = ev.target.scrollHeight;\r\n    this.setState({\r\n      scrollTop: fromTop,\r\n    })\r\n  }\r\n\r\n  handleSendMsg = (text) => {\r\n    if (this.state.wsStatus === 1) {\r\n      const msg = {\r\n        from: this.state.from,\r\n        message: text,\r\n      };\r\n      this.ws.send(JSON.stringify(msg));\r\n    } else {\r\n      let localMsgs = JSON.parse(localStorage.getItem('msgs')) || [];\r\n      localMsgs.push(text);\r\n      localStorage.setItem('msgs', JSON.stringify(localMsgs));\r\n    }\r\n  }\r\n\r\n  // handleGetMsg = (msg) => {\r\n  //   this.setState((state) => {\r\n  //     const reverseData = JSON.parse(msg.data).reverse();\r\n  //     return {\r\n  //       msgs: [...state.msgs, ...reverseData],\r\n  //     }\r\n  //   })\r\n  // }\r\n\r\n  render() {\r\n    const { wsStatus, from, msgs, scrollTop } = this.state;\r\n    return (\r\n      <>\r\n        <Head\r\n          wsStatus={wsStatus}\r\n          from={from}\r\n          onLogout={this.handleLogout}\r\n          onLogin={this.handleLogin}\r\n        />\r\n        <Body\r\n          wsStatus={wsStatus}\r\n          msgs={msgs}\r\n          scrollTop={scrollTop}\r\n          scrolling={this.handleScroll}\r\n        />\r\n        <Foot\r\n          onLogin={this.handleLogin}\r\n          from={from}\r\n          onSendMsg={this.handleSendMsg}\r\n        />\r\n        \r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}